📑Types of Agent Actions 
--------------------------------------------------------------------
Type of Agent           |  Description
------------------------|-----------------------------------------------------------------------------------------------------------------------	         
JSON Agent	            | The Action to take is specified in JSON format.
Code Agent	            | The Agent writes a code block that is interpreted externally.
Function-calling Agent	|  It is a subcategory of the JSON Agent which has been fine-tuned to generate a new message for each action.




1️⃣ Why Use smolagents
🟢smolagents is one of the many open-source agent frameworks available for application development. Alternative options include LlamaIndex and LangGraph, which are also covered in other modules in this course. smolagents offers several key features that might make it a great fit for specific use cases, but we should always consider all options when selecting a framework. We’ll explore the advantages and drawbacks of using smolagents, helping you make an informed decision based on your project’s requirements.


2️⃣ CodeAgents
🟢CodeAgents are the primary type of agent in smolagents. Instead of generating JSON or text, these agents produce Python code to perform actions. This module explores their purpose, functionality, and how they work, along with hands-on examples to showcase their capabilities.


3️⃣ ToolCallingAgents
🟢ToolCallingAgents are the second type of agent supported by smolagents. Unlike CodeAgents, which generate Python code, these agents rely on JSON/text blobs that the system must parse and interpret to execute actions. This module covers their functionality, their key differences from CodeAgents, and it provides an example to illustrate their usage.


4️⃣ Tools
🟢As we saw in Unit 1, tools are functions that an LLM can use within an agentic system, and they act as the essential building blocks for agent behavior. This module covers how to create tools, their structure, and different implementation methods using the Tool class or the @tool decorator. You’ll also learn about the default toolbox, how to share tools with the community, and how to load community-contributed tools for use in your agents.


5️⃣ Retrieval Agents
🟢Retrieval agents allow models access to knowledge bases, making it possible to search, synthesize, and retrieve information from multiple sources. They leverage vector stores for efficient retrieval and implement Retrieval-Augmented Generation (RAG) patterns. These agents are particularly useful for integrating web search with custom knowledge bases while maintaining conversation context through memory systems. This module explores implementation strategies, including fallback mechanisms for robust information retrieval.

6️⃣ Multi-Agent Systems
🟢Orchestrating multiple agents effectively is crucial for building powerful, multi-agent systems. By combining agents with different capabilities—such as a web search agent with a code execution agent—you can create more sophisticated solutions. This module focuses on designing, implementing, and managing multi-agent systems to maximize efficiency and reliability.

7️⃣ Vision and Browser agents
🟢Vision agents extend traditional agent capabilities by incorporating Vision-Language Models (VLMs), enabling them to process and interpret visual information. This module explores how to design and integrate VLM-powered agents, unlocking advanced functionalities like image-based reasoning, visual data analysis, and multimodal interactions. We will also use vision agents to build a browser agent that can browse the web and extract information from it.


🔑Key Advantages of smolagents
--------------------------------------------------------------------
Simplicity: Minimal code complexity and abstractions, to make the framework easy to understand, adopt and extend
Flexible LLM Support: Works with any LLM through integration with Hugging Face tools and external APIs
Code-First Approach: First-class support for Code Agents that write their actions directly in code, removing the need for parsing and simplifying tool calling
HF Hub Integration: Seamless integration with the Hugging Face Hub, allowing the use of Gradio Spaces as tools





🔑When to use smolagents?
--------------------------------------------------------------------
With these advantages in mind, when should we use smolagents over other frameworks?
smolagents is ideal when:

🟢You need a lightweight and minimal solution.
🟢You want to experiment quickly without complex configurations.
🟢Your application logic is straightforward.







🔑Agent Types in smolagents
--------------------------------------------------------------------
Agents in smolagents operate as multi-step agents.
Each MultiStepAgent performs:

🟢One thought
🟢One tool call and execution
🟢In addition to using CodeAgent as the primary type of agent, smolagents also supports ToolCallingAgent, which writes tool calls in JSON.



    

🔑@Tool 
--------------------------------------------------------------------
📌In smolagents, tools are defined using @tool decorator wrapping a python function or the Tool class.



🔑Model Integration in smolagents
--------------------------------------------------------------------
smolagents supports flexible LLM integration, allowing you to use any callable model that meets certain criteria(https://huggingface.co/docs/smolagents/main/en/reference/models). The framework provides several predefined classes to simplify model connections:

🟢TransformersModel (https://huggingface.co/docs/smolagents/main/en/reference/models#smolagents.TransformersModel): Implements a local transformers pipeline for seamless integration.
🟢HfApiModel(https://huggingface.co/docs/smolagents/main/en/reference/models#smolagents.HfApiModel): Supports serverless inference(https://huggingface.co/docs/huggingface_hub/main/en/guides/inference) calls through Hugging Face’s infrastructure(https://huggingface.co/docs/api-inference/index), or via a growing number of third-party inference providers(https://huggingface.co/docs/huggingface_hub/main/en/guides/inference#supported-providers-and-tasks).
🟢LiteLLMModel(https://huggingface.co/docs/smolagents/main/en/reference/models#smolagents.LiteLLMModel): Leverages LiteLLM(https://www.litellm.ai/) for lightweight model interactions.
🟢OpenAIServerModel(https://huggingface.co/docs/smolagents/main/en/reference/models#smolagents.OpenAIServerModel): Connects to any service that offers an OpenAI API interface.
🟢AzureOpenAIServerModel(https://huggingface.co/docs/smolagents/main/en/reference/models#smolagents.AzureOpenAIServerModel): Supports integration with any Azure OpenAI deployment.

📌This flexibility ensures that developers can choose the model and service most suitable for their specific use cases, and allows for easy experimentation.





Why Code Agents?
--------------------------------------------------------------------
Writing actions in code rather than JSON offers several key advantages:
Composability: Easily combine and reuse actions
Object Management: Work directly with complex structures like images
Generality: Express any computationally possible task
Natural for LLMs: High-quality code is already present in LLM training data
